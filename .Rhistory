# create first differenced prices and search interest
t <- length(gold_pr$DATE)
gold_price_FD <- rep(0,t-1)
for(i in 2:209){gold_price_FD[i-1] <- gold_pr$GOLDPMGBD228NLBM[i]-gold_pr$GOLDPMGBD228NLBM[i-1]}
gold_search_FD <- rep(0,t-1)
for(i in 2:209){gold_search_FD[i-1] <- data$GOLD[i]-data$GOLD[i-1]}
t_1 <- length(gold_HF$DATE)
gold_daily_FD <- rep(0,t_1-1)
for(i in 2:5332){gold_daily_FD[i-1] <- gold_HF$GOLDPMGBD228NLBM[i]-gold_HF$GOLDPMGBD228NLBM[i-1]}
# plot first differenced variables
plot(y=gold_price_FD,x=gold_pr$DATE[1-209], type = 'l', lwd = 1, col = 'red',
xlab = 'Time', ylab = '1-Period Differences',
main = 'First Differences: Gold Price and Search Interest')
lines(y=gold_search_FD*8,x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# plot ACF for unmodified variables:
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
acf(gold_pr$GOLDPMGBD228NLBM, main = 'ACF Gold Price')
acf(data$GOLD, main = 'ACF Gold Search Interest')
# plot PACF for unmodified variables:
pacf(gold_pr$GOLDPMGBD228NLBM, main = 'PACF Gold Price')
pacf(data$GOLD, main = 'PACF Gold Search Interest')
# plot ACF for differenced variables
acf(gold_price_FD,main = 'ACF Gold Price FD')
acf(gold_search_FD, main = 'ACF Gold Search Interest FD')
# plot PACF for differenced variables
pacf(gold_price_FD,main = 'PACF Gold Price FD')
pacf(gold_search_FD, main = 'PACF Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
plot(y=range01(gold_pr$GOLDPMGBD228NLBM),x=gold_pr$DATE, lwd = 2, type = 'l',
ylab = 'Scaled Price and Search Interest',
xlab = 'Time', col = 'red')
lines(y=range01(data$GOLD),x=gold_pr$DATE, lwd = 2, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# save scaled variables
gold_price_scaled <- range01(gold_pr$GOLDPMGBD228NLBM)
gold_search_scaled <- range01(data$GOLD)
# create first difference on scaled variables:
gold_search_scaled_FD <- rep(0,t-1)
gold_price_scaled_FD <- rep(0,t-1)
for(i in 2:t-1){
gold_price_scaled_FD[i-1] <- gold_price_scaled[i]-gold_price_scaled[i-1]
}
for(i in 2:t-1){
gold_search_scaled_FD[i-1] <- gold_search_scaled[i]-gold_search_scaled[i-1]
}
# plot first differenced:
plot(y=gold_price_scaled_FD, x=gold_pr$DATE[1-209], lwd = 1, type = 'l',
ylab = 'FD Scaled Price and Search Interest',
xlab = 'Time', col = 'red')
lines(y= gold_search_scaled_FD, x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# plot ACFs
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
acf(gold_price_scaled, main = 'ACF Scaled Gold Price')
acf(gold_search_scaled, main = 'ACF Scaled Gold Search Interest')
acf(gold_price_scaled_FD,main = 'ACF Scaled Gold Price FD')
acf(gold_search_scaled_FD, main = 'ACF Scaled Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
# plot PACFs
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
pacf(gold_price_scaled, main = 'PACF Scaled Gold Price')
pacf(gold_search_scaled, main = 'PACF Scaled Gold Search Interest')
pacf(gold_price_scaled_FD,main = 'PACF Scaled Gold Price FD')
pacf(gold_search_scaled_FD, main = 'PACF Scaled Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
#####################################################
####### From here on: data saved as time series #####
#####################################################
# "Normal" scaled
# save variable vectors as time series format:
gold_price_scaled <- ts(gold_price_scaled, frequency = 12,
start = c(2004, 1), end = c(2021, 5))
gold_search_scaled <- ts(gold_search_scaled, frequency = 12,
start = c(2004,1), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data_scaled <- window(ts.union(gold_price_scaled, gold_search_scaled),
start = c(2004, 1), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est_scaled <- VAR(y = VAR_data_scaled, p = 5)        # used lag order 5 without testing anything !!!!!!!!!!!!!!!!!!!!!!!
summary(VAR_est_scaled)
# augmented df test on only the gold price
df_test_gold_price <- urca::ur.df(gold_price_scaled, type = c('trend'),
selectlags = 'BIC')
summary(df_test_gold_price)
# augmented df test on only the gold search
df_test_gold_search <- urca::ur.df(gold_search_scaled, type = c('trend'),
selectlags = 'BIC')
summary(df_test_gold_search)
# the null is always random walk with drift/null
# First-differences scaled
# save variable vectors as time series format:
gold_price_scaled_FD <- ts(gold_price_scaled_FD, frequency = 12,
start = c(2004, 2), end = c(2021, 5))      #took 2004,2, because we are now dealing with FD
gold_search_scaled_FD <- ts(gold_search_scaled, frequency = 12,
start = c(2004,2), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data_scaled_FD <- window(ts.union(gold_price_scaled_FD, gold_search_scaled_FD),
start = c(2004, 2), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est_scaled_FD <- VAR(y = VAR_data_scaled_FD, p = 5)        # used lag order 5 without testing anything !!!!!!!!!!!!!!!!!!!!!!!
summary(VAR_est_scaled_FD)
# augmented df test on only the differenced gold price
df_test_gold_price_FD <- urca::ur.df(gold_price_scaled_FD, type = 'none',
selectlags = 'BIC')
summary(df_test_gold_price_FD)
# augmented df test on only the differenced gold search
df_test_gold_search_FD <- urca::ur.df(gold_search_scaled_FD, type = 'none',
selectlags = 'BIC')
summary(df_test_gold_search_FD)
# "Normal" VAR models with unscaled prices
# save variable vectors as time series format:
gold_price <- ts(gold_price, frequency = 12,
start = c(2004, 1), end = c(2021, 5))
gold_search <- ts(gold_search, frequency = 12,
start = c(2004,1), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data <- window(ts.union(gold_price, gold_search),
start = c(2004, 1), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est <- VAR(y = VAR_data, p = 5, type = 'both')    # used lag order 5 without testing anything !!!!!!!!!!!!!!!!!!!!!!!
summary(VAR_est)
#####################################################
####### Sollten wir hier beim AR(1) nicht die First differences verwenden.
# Weil wir ja einen I(1) prozess haben. Und sollten wir nicht einfach mit
# dem besteren ARMA modell arbeiten und nicht AR(1) ? #####
#####################################################
# compare the VAR to the AR(1) model for the prices
T <-length(gold_price)
gold_price_2 <- as.numeric(gold_price[-1])
gold_price_lagged <- as.numeric(gold_price[-T])
plot(y=gold_price_2,x=gold_pr$DATE[1-209], type = 'l', lwd = 1, col = 'red',
main = 'Gold Price and Lagged Gold Price',
ylab = 'Gold Price', xlab = 'Months from 01.2004')
lines(y=gold_price_lagged,x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('Lagged Price','Price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# estimate model
gold_price_AR1 <- lm(gold_price_2 ~ gold_price_lagged)
# estimate robust standard errors
coeftest(gold_price_AR1, vcov. = vcovHC, type = "HC1")
# "First-difference" VAR models with unscaled prices
# save variable vectors as time series format:
gold_price_FD <- ts(gold_price_FD, frequency = 12,
start = c(2004, 2), end = c(2021, 5))       #took 2004,2, because we are now dealing with FD
gold_search_FD <- ts(gold_search_FD, frequency = 12,
start = c(2004,2), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data_FD <- window(ts.union(gold_price_FD, gold_search_FD),
start = c(2004, 2), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est_FD <- VAR(y = VAR_data_FD, p = 5, type = 'both')    # used lag order 5 without testing anything !!!!!!!!!!!!!!!!!!!!!!!
summary(VAR_est_FD)
# compare the VAR to the AR(1) model for the prices first-differences
T <-length(gold_price_FD)
gold_price_FD_2 <- as.numeric(gold_price_FD[-1])
gold_price_FD_lagged <- as.numeric(gold_price_FD[-T])
plot(y=gold_price_FD_2,x=gold_pr$DATE[3:209], type = 'l', lwd = 1, col = 'red',
main = 'Gold Price FD and Lagged Gold Price FD',
ylab = 'Gold Price FD', xlab = 'Months from 01.2004')
lines(y=gold_price_FD_lagged,x=gold_pr$DATE[3:209], lwd = 1, col = 'blue')
legend('topleft', legend = c('Lagged Price','Price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# estimate model
gold_price_FD_AR1 <- lm(gold_price_FD_2 ~ gold_price_FD_lagged)
# estimate robust standard errors
coeftest(gold_price_FD_AR1, vcov. = vcovHC, type = "HC1")
# verify the 'by-hand' results with built-in function for ARIMA
ar.ols(gold_price, order.max = 5, intercept = T)
forecast::auto.arima(gold_price, ic = 'aic')
#for FD
ar.ols(gold_price_FD, order.max = 5, intercept = T) #just verifies the above ARIMA(0,1,1)
forecast::auto.arima(gold_price_FD, ic = 'aic')
# estimate model coefficients using AIC
VAR_lag <- VAR(y = VAR_data, type = 'both', ic = 'AIC', lag.max = 15)
summary(VAR_lag)
VAR_lag_select <- VARselect(y = VAR_data, type = 'both', lag.max = 15)
VAR_lag_select
#for FD
VAR_lag_FD <- VAR(y = VAR_data_FD, type = 'both', ic = 'AIC', lag.max = 15)
summary(VAR_lag_FD)
VAR_lag_FD_select <- VARselect(y = VAR_data_FD, type = 'both', lag.max = 15)
VAR_lag_FD_select
#Problem! All roots are inside the unit circle --> unstable. This is why we try it without a trend --> type = 'const' (which would anyhow be the default)
VAR_lag <- VAR(y = VAR_data, type = 'const', ic = 'AIC', lag.max = 15)
summary(VAR_lag)
VAR_lag_select <- VARselect(y = VAR_data, type = 'const', lag.max = 15)
VAR_lag_select
#for FD
VAR_lag_FD <- VAR(y = VAR_data_FD, type = 'const', ic = 'AIC', lag.max = 15)
summary(VAR_lag_FD)
VAR_lag_FD_select <- VARselect(y = VAR_data_FD, type = 'const', lag.max = 15)
VAR_lag_FD_select
#Force it to 1 lag
# estimate model coefficients using AIC
VAR_lag <- VAR(y = VAR_data, type = 'both', p=1)
summary(VAR_lag)
#for FD
VAR_lag_FD <- VAR(y = VAR_data_FD, type = 'both', p=1)
summary(VAR_lag_FD)
VAR_lag <- VAR(y = VAR_data, type = 'const', p=1)
summary(VAR_lag)
#for FD
VAR_lag_FD <- VAR(y = VAR_data_FD, type = 'const', p=1)
summary(VAR_lag_FD)
po.test(VAR_data, demean = TRUE, lshort = TRUE)
# for FD
po.test(VAR_data_FD, demean = TRUE, lshort = TRUE)
# Differenced AR(1) and ARCH Model for Gold Prices
gold_price_FD <- ts(gold_price_FD, frequency = 12,
start = c(2004, 2), end = c(2021, 5))
plot(gold_price_FD, ylab = 'FD Gold Prices', col = 'red', lwd = 1.5)
ar1mod_FD <- arima(gold_price_FD, order = c(1,0,0))
ar1mod_FD
plot(forecast::arima.errors(ar1mod_FD),type = 'l', lwd = 1.5, col = 'blue',
ylab = 'ARIMA residuals')
mean(forecast::arima.errors(ar1mod_FD))
resi_ar1_FD_2 <- (forecast::arima.errors(ar1mod_FD))^2
resi_arch1_FD_2_model <- arima(resi_ar1_FD_2, order = c(1,0,0))
resi_arch1_FD_2_model
# plot the squared residuals:
plot(resi_ar1_FD_2, ylab = 'Squared AR(1) Residuals of FD Gold Price',
xlab = 'Time from 02.2004', col = 'red', lwd = 1.5)
# Differenced MA(1) and ARCH Model for Gold Prices
gold_price_FD <- ts(gold_daily_FD, frequency = 365,
start = c(2001, 1, 1), end = c(2021, 6, 10))
plot(gold_price_FD, ylab = 'FD Gold Prices', col = 'red', lwd = 0.5)
model_HF_FD <- forecast::auto.arima(gold_price_FD, ic = 'aic')
model_HF_FD
plot(forecast::arima.errors(model_HF_FD),type = 'l', lwd = 0.5, col = 'blue',
ylab = 'ARIMA residuals')
resi_ma1_FD_2 <- (forecast::arima.errors(model_HF_FD))^2
resi_arch1_FD_2_model <- arima(resi_ma1_FD_2, order = c(1,0,0))
resi_arch1_FD_2_model
# plot the squared residuals:
plot(resi_ma1_FD_2, ylab = 'Squared MA(1) Residuals of FD Gold Price',
xlab = 'Time from 01.2001', col = 'red', lwd = 0.5)
knitr::opts_chunk$set(echo = TRUE)
# clear workspace
rm(list=ls())
# load needed libraries
library(readr)
library(vars)
library(tseries)
# set working directory
#setwd("/Users/samue/Downloads/Studium/Economics (Master - Vienna)/2. Semester/Macroeconometrics/Project/macroeconometrics_prices")
# import search trends
data <-  read_csv("btc-vs-gold-2004.csv", col_types = cols(Month = col_date(format = "%Y-%m")))
# import prices data:
gold_pr <- read_csv("gold-2004.csv", col_types = cols(DATE = col_date(format = "%Y-%m-%d")))
# import high-frequency prices for gold:
gold_HF <- read_csv('gold-2001-HF.csv', col_types = cols(DATE = col_date(format = '%Y-%m-%d'),GOLDPMGBD228NLBM = col_double()))
gold_price <- gold_pr$GOLDPMGBD228NLBM
gold_search <- data$GOLD
# plot gold price on monthly basis
plot(y=gold_pr$GOLDPMGBD228NLBM,x=gold_pr$DATE,type = 'l', lwd = 2, col = 'red',
ylim = c(0,2000), main = 'Gold Price and Search Interest',
xlab = 'Time', ylab = 'Search Interest (scaled) & Price (unscaled)')
# add gold search interest scaled up
lines(y=25*data$GOLD,x=gold_pr$DATE, lwd = 2, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# create first differenced prices and search interest
t <- length(gold_pr$DATE)
gold_price_FD <- rep(0,t-1)
for(i in 2:209){gold_price_FD[i-1] <- gold_pr$GOLDPMGBD228NLBM[i]-gold_pr$GOLDPMGBD228NLBM[i-1]}
gold_search_FD <- rep(0,t-1)
for(i in 2:209){gold_search_FD[i-1] <- data$GOLD[i]-data$GOLD[i-1]}
t_1 <- length(gold_HF$DATE)
gold_daily_FD <- rep(0,t_1-1)
for(i in 2:5332){gold_daily_FD[i-1] <- gold_HF$GOLDPMGBD228NLBM[i]-gold_HF$GOLDPMGBD228NLBM[i-1]}
# plot first differenced variables
plot(y=gold_price_FD,x=gold_pr$DATE[1-209], type = 'l', lwd = 1, col = 'red',
xlab = 'Time', ylab = '1-Period Differences',
main = 'First Differences: Gold Price and Search Interest')
lines(y=gold_search_FD*8,x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# plot ACF for unmodified variables:
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
acf(gold_pr$GOLDPMGBD228NLBM, main = 'ACF Gold Price')
acf(data$GOLD, main = 'ACF Gold Search Interest')
# plot PACF for unmodified variables:
pacf(gold_pr$GOLDPMGBD228NLBM, main = 'PACF Gold Price')
pacf(data$GOLD, main = 'PACF Gold Search Interest')
# plot ACF for differenced variables
acf(gold_price_FD,main = 'ACF Gold Price FD')
acf(gold_search_FD, main = 'ACF Gold Search Interest FD')
# plot PACF for differenced variables
pacf(gold_price_FD,main = 'PACF Gold Price FD')
pacf(gold_search_FD, main = 'PACF Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
plot(y=range01(gold_pr$GOLDPMGBD228NLBM),x=gold_pr$DATE, lwd = 2, type = 'l',
ylab = 'Scaled Price and Search Interest',
xlab = 'Time', col = 'red')
lines(y=range01(data$GOLD),x=gold_pr$DATE, lwd = 2, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# save scaled variables
gold_price_scaled <- range01(gold_pr$GOLDPMGBD228NLBM)
gold_search_scaled <- range01(data$GOLD)
# create first difference on scaled variables:
gold_search_scaled_FD <- rep(0,t-1)
gold_price_scaled_FD <- rep(0,t-1)
for(i in 2:t-1){
gold_price_scaled_FD[i-1] <- gold_price_scaled[i]-gold_price_scaled[i-1]
}
for(i in 2:t-1){
gold_search_scaled_FD[i-1] <- gold_search_scaled[i]-gold_search_scaled[i-1]
}
# plot first differenced:
plot(y=gold_price_scaled_FD, x=gold_pr$DATE[1-209], lwd = 1, type = 'l',
ylab = 'FD Scaled Price and Search Interest',
xlab = 'Time', col = 'red')
lines(y= gold_search_scaled_FD, x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# plot ACFs
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
acf(gold_price_scaled, main = 'ACF Scaled Gold Price')
acf(gold_search_scaled, main = 'ACF Scaled Gold Search Interest')
acf(gold_price_scaled_FD,main = 'ACF Scaled Gold Price FD')
acf(gold_search_scaled_FD, main = 'ACF Scaled Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
# plot PACFs
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
pacf(gold_price_scaled, main = 'PACF Scaled Gold Price')
pacf(gold_search_scaled, main = 'PACF Scaled Gold Search Interest')
pacf(gold_price_scaled_FD,main = 'PACF Scaled Gold Price FD')
pacf(gold_search_scaled_FD, main = 'PACF Scaled Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
#####################################################
####### From here on: data saved as time series #####
#####################################################
# "Normal" scaled
# save variable vectors as time series format:
gold_price_scaled <- ts(gold_price_scaled, frequency = 12,
start = c(2004, 1), end = c(2021, 5))
gold_search_scaled <- ts(gold_search_scaled, frequency = 12,
start = c(2004,1), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data_scaled <- window(ts.union(gold_price_scaled, gold_search_scaled),
start = c(2004, 1), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est_scaled <- VAR(y = VAR_data_scaled, p = 5)        # used lag order 5 without testing anything !!!!!!!!!!!!!!!!!!!!!!!
summary(VAR_est_scaled)
# augmented df test on only the gold price
df_test_gold_price <- urca::ur.df(gold_price_scaled, type = c('trend'),
selectlags = 'BIC')
summary(df_test_gold_price)
# augmented df test on only the gold search
df_test_gold_search <- urca::ur.df(gold_search_scaled, type = c('trend'),
selectlags = 'BIC')
summary(df_test_gold_search)
# the null is always random walk with drift/null
# First-differences scaled
# save variable vectors as time series format:
gold_price_scaled_FD <- ts(gold_price_scaled_FD, frequency = 12,
start = c(2004, 2), end = c(2021, 5))      #took 2004,2, because we are now dealing with FD
gold_search_scaled_FD <- ts(gold_search_scaled, frequency = 12,
start = c(2004,2), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data_scaled_FD <- window(ts.union(gold_price_scaled_FD, gold_search_scaled_FD),
start = c(2004, 2), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est_scaled_FD <- VAR(y = VAR_data_scaled_FD, p = 5)        # used lag order 5 without testing anything !!!!!!!!!!!!!!!!!!!!!!!
summary(VAR_est_scaled_FD)
# augmented df test on only the differenced gold price
df_test_gold_price_FD <- urca::ur.df(gold_price_scaled_FD, type = 'none',
selectlags = 'BIC')
summary(df_test_gold_price_FD)
# augmented df test on only the differenced gold search
df_test_gold_search_FD <- urca::ur.df(gold_search_scaled_FD, type = 'none',
selectlags = 'BIC')
summary(df_test_gold_search_FD)
# "Normal" VAR models with unscaled prices
# save variable vectors as time series format:
gold_price <- ts(gold_price, frequency = 12,
start = c(2004, 1), end = c(2021, 5))
gold_search <- ts(gold_search, frequency = 12,
start = c(2004,1), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data <- window(ts.union(gold_price, gold_search),
start = c(2004, 1), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est <- VAR(y = VAR_data, p = 5, type = 'both')    # used lag order 5 without testing anything !!!!!!!!!!!!!!!!!!!!!!!
summary(VAR_est)
#####################################################
####### Sollten wir hier beim AR(1) nicht die First differences verwenden.
# Weil wir ja einen I(1) prozess haben. Und sollten wir nicht einfach mit
# dem besteren ARMA modell arbeiten und nicht AR(1) ? #####
#####################################################
# compare the VAR to the AR(1) model for the prices
T <-length(gold_price)
gold_price_2 <- as.numeric(gold_price[-1])
gold_price_lagged <- as.numeric(gold_price[-T])
plot(y=gold_price_2,x=gold_pr$DATE[1-209], type = 'l', lwd = 1, col = 'red',
main = 'Gold Price and Lagged Gold Price',
ylab = 'Gold Price', xlab = 'Months from 01.2004')
lines(y=gold_price_lagged,x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('Lagged Price','Price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# estimate model
gold_price_AR1 <- lm(gold_price_2 ~ gold_price_lagged)
# estimate robust standard errors
coeftest(gold_price_AR1, vcov. = vcovHC, type = "HC1")
# "First-difference" VAR models with unscaled prices
# save variable vectors as time series format:
gold_price_FD <- ts(gold_price_FD, frequency = 12,
start = c(2004, 2), end = c(2021, 5))       #took 2004,2, because we are now dealing with FD
gold_search_FD <- ts(gold_search_FD, frequency = 12,
start = c(2004,2), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data_FD <- window(ts.union(gold_price_FD, gold_search_FD),
start = c(2004, 2), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est_FD <- VAR(y = VAR_data_FD, p = 5, type = 'both')    # used lag order 5 without testing anything !!!!!!!!!!!!!!!!!!!!!!!
summary(VAR_est_FD)
# compare the VAR to the AR(1) model for the prices first-differences
T <-length(gold_price_FD)
gold_price_FD_2 <- as.numeric(gold_price_FD[-1])
gold_price_FD_lagged <- as.numeric(gold_price_FD[-T])
plot(y=gold_price_FD_2,x=gold_pr$DATE[3:209], type = 'l', lwd = 1, col = 'red',
main = 'Gold Price FD and Lagged Gold Price FD',
ylab = 'Gold Price FD', xlab = 'Months from 01.2004')
lines(y=gold_price_FD_lagged,x=gold_pr$DATE[3:209], lwd = 1, col = 'blue')
legend('topleft', legend = c('Lagged Price','Price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# estimate model
gold_price_FD_AR1 <- lm(gold_price_FD_2 ~ gold_price_FD_lagged)
# estimate robust standard errors
coeftest(gold_price_FD_AR1, vcov. = vcovHC, type = "HC1")
# verify the 'by-hand' results with built-in function for ARIMA
ar.ols(gold_price, order.max = 5, intercept = T)
forecast::auto.arima(gold_price, ic = 'aic')
#for FD
ar.ols(gold_price_FD, order.max = 5, intercept = T) #just verifies the above ARIMA(0,1,1)
forecast::auto.arima(gold_price_FD, ic = 'aic')
# estimate model coefficients using AIC
VAR_lag <- VAR(y = VAR_data, type = 'both', ic = 'AIC', lag.max = 15)
summary(VAR_lag)
VAR_lag_select <- VARselect(y = VAR_data, type = 'both', lag.max = 15)
VAR_lag_select
#for FD
VAR_lag_FD <- VAR(y = VAR_data_FD, type = 'both', ic = 'AIC', lag.max = 15)
summary(VAR_lag_FD)
VAR_lag_FD_select <- VARselect(y = VAR_data_FD, type = 'both', lag.max = 15)
VAR_lag_FD_select
#Problem! All roots are inside the unit circle --> unstable. This is why we try it without a trend --> type = 'const' (which would anyhow be the default)
VAR_lag <- VAR(y = VAR_data, type = 'const', ic = 'AIC', lag.max = 15)
summary(VAR_lag)
VAR_lag_select <- VARselect(y = VAR_data, type = 'const', lag.max = 15)
VAR_lag_select
#for FD
VAR_lag_FD <- VAR(y = VAR_data_FD, type = 'const', ic = 'AIC', lag.max = 15)
summary(VAR_lag_FD)
VAR_lag_FD_select <- VARselect(y = VAR_data_FD, type = 'const', lag.max = 15)
VAR_lag_FD_select
#Force it to 1 lag
# estimate model coefficients using AIC
VAR_lag <- VAR(y = VAR_data, type = 'both', p=1)
summary(VAR_lag)
#for FD
VAR_lag_FD <- VAR(y = VAR_data_FD, type = 'both', p=1)
summary(VAR_lag_FD)
VAR_lag <- VAR(y = VAR_data, type = 'const', p=1)
summary(VAR_lag)
#for FD
VAR_lag_FD <- VAR(y = VAR_data_FD, type = 'const', p=1)
summary(VAR_lag_FD)
po.test(VAR_data, demean = TRUE, lshort = TRUE)
# for FD
po.test(VAR_data_FD, demean = TRUE, lshort = TRUE)
# Differenced AR(1) and ARCH Model for Gold Prices
gold_price_FD <- ts(gold_price_FD, frequency = 12,
start = c(2004, 2), end = c(2021, 5))
plot(gold_price_FD, ylab = 'FD Gold Prices', col = 'red', lwd = 1.5)
ar1mod_FD <- arima(gold_price_FD, order = c(1,0,0))
ar1mod_FD
plot(forecast::arima.errors(ar1mod_FD),type = 'l', lwd = 1.5, col = 'blue',
ylab = 'ARIMA residuals')
mean(forecast::arima.errors(ar1mod_FD))
resi_ar1_FD_2 <- (forecast::arima.errors(ar1mod_FD))^2
resi_arch1_FD_2_model <- arima(resi_ar1_FD_2, order = c(1,0,0))
resi_arch1_FD_2_model
# plot the squared residuals:
plot(resi_ar1_FD_2, ylab = 'Squared AR(1) Residuals of FD Gold Price',
xlab = 'Time from 02.2004', col = 'red', lwd = 1.5)
# Differenced MA(1) and ARCH Model for Gold Prices
gold_price_FD <- ts(gold_daily_FD, frequency = 365,
start = c(2001, 1, 1), end = c(2021, 6, 10))
plot(gold_price_FD, ylab = 'FD Gold Prices', col = 'red', lwd = 0.5)
model_HF_FD <- forecast::auto.arima(gold_price_FD, ic = 'aic')
model_HF_FD
plot(forecast::arima.errors(model_HF_FD),type = 'l', lwd = 0.5, col = 'blue',
ylab = 'ARIMA residuals')
resi_ma1_FD_2 <- (forecast::arima.errors(model_HF_FD))^2
resi_arch1_FD_2_model <- arima(resi_ma1_FD_2, order = c(1,0,0))
resi_arch1_FD_2_model
# plot the squared residuals:
plot(resi_ma1_FD_2, ylab = 'Squared MA(1) Residuals of FD Gold Price',
xlab = 'Time from 01.2001', col = 'red', lwd = 0.5)
#Try GARCH(1,1)
gold_price_FD_clean <- na.remove(gold_price_FD) #always got an error for NA
garch_gold_price_FD <- garch(x=gold_price_FD_clean ,order=c(1,1))
summary(garch_gold_price_FD)
plot(garch_gold_price_FD)
