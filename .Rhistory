garch_gold_price_FD = garch(x=gold_price_FD_clean ,order=c(1,1))
summary(garch_gold_price_FD)
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution = 'std')
setstart(spec) <- list(shape = 6)
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution = 'std')
setstart(spec) <- list(shape = 5)
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model = list (armaOrder = c(0,0)), variance.model = list (model="sGARCH"),distribution.model="normal")
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model = list (armaOrder = c(0,0)), variance.model = list (model="sGARCH"),distribution.model="normal")
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(
mean.model = list (armaOrder = c(0,0)),
variance.model = list (model="sGARCH"),
distribution.model="normal")
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(
mean.model = list (armaOrder = c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model="normal")
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(
mean.model = list (armaorder = c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model="normal")
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(
mean.model = list (armaOrder = c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model="normal")
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(
mean.model = list (armaOrder = c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model="normal")
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(2,2),
variance.model = list (model = "sGARCH"),
distribution.model="normal")
garchfit <- ugarchfit(data = gold_price_FD_clean,
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(2,2),
variance.model = list (model = "sGARCH"),
distribution.model="norm")
garchfit <- ugarchfit(data = gold_price_FD_clean,
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(2,2),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD_clean,
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD_clean,
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD_clean,
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD_clean,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_daily_FD,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_daily_FD_clean,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD_clean,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD_clean,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = unclass(gold_price_FD_clean),
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = unclass(gold_daily_FD_clean),
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = unclass(gold_price_FD_clean),
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = unclass(gold_price_FD_clean),
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD,
sepc = garchspec)
class(gold_price_FD)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(1,01)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD,
sepc = garchspec)
# Check, if the above works for standard GARCH
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model = list (model = "sGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = gold_price_FD,
sepc = garchspec)
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution = 'std')
setstart(spec) <- list(shape = 5)
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution = 'std')
setstart(spec) <- list(shape = 3)
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution = 'std')
setstart(spec) <- list(shape = 5)
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD, solver = 'hybrid')
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution = 'std')
setstart(spec) <- list(shape = 5)
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
#Try EGARCH
#load rugarch library
library(rugarch)
spec = ugarchspec(variance.model = list(model = 'eGARCH', garchOrder = c(1, 1)), distribution = 'std')
egarch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
egarch_gold_price_FD
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)), distribution = 'std')
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
setstart(spec) <- list(shape = 5)
list(shape = 5)
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)))
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)))
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean)
test_garch_gold_price_FD
#Try GARCH
gold_price_FD_clean <- na.remove(gold_price_FD) #always got an error
garch_gold_price_FD = garch(x=gold_price_FD_clean ,order=c(1,1))
summary(garch_gold_price_FD)
knitr::opts_chunk$set(echo = TRUE)
# clear workspace
rm(list=ls())
# load needed libraries
library(readr)
library(vars)
library(tseries)
# set working directory
#setwd("/Users/samue/Downloads/Studium/Economics (Master - Vienna)/2. Semester/Macroeconometrics/Project/macroeconometrics_prices")
# import search trends
data <-  read_csv("btc-vs-gold-2004.csv", col_types = cols(Month = col_date(format = "%Y-%m")))
# import prices data:
gold_pr <- read_csv("gold-2004.csv", col_types = cols(DATE = col_date(format = "%Y-%m-%d")))
# import high-frequency prices for gold:
gold_HF <- read_csv('gold-2001-HF.csv', col_types = cols(DATE = col_date(format = '%Y-%m-%d'),GOLDPMGBD228NLBM = col_double()))
# plot gold price on monthly basis
plot(y=gold_pr$GOLDPMGBD228NLBM,x=gold_pr$DATE,type = 'l', lwd = 2, col = 'red',
ylim = c(0,2000), main = 'Gold Price and Search Interest',
xlab = 'Time', ylab = 'Search Interest (scaled) & Price (unscaled)')
# add gold search interest scaled up
lines(y=25*data$GOLD,x=gold_pr$DATE, lwd = 2, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# create first differenced prices and search interest
t <- length(gold_pr$DATE)
gold_price_FD <- rep(0,t-1)
for(i in 2:209){gold_price_FD[i-1] <- gold_pr$GOLDPMGBD228NLBM[i]-gold_pr$GOLDPMGBD228NLBM[i-1]}
gold_search_FD <- rep(0,t-1)
for(i in 2:209){gold_search_FD[i-1] <- data$GOLD[i]-data$GOLD[i-1]}
t_1 <- length(gold_HF$DATE)
gold_daily_FD <- rep(0,t_1-1)
for(i in 2:5332){gold_daily_FD[i-1] <- gold_HF$GOLDPMGBD228NLBM[i]-gold_HF$GOLDPMGBD228NLBM[i-1]}
# plot first differenced variables
plot(y=gold_price_FD,x=gold_pr$DATE[1-209], type = 'l', lwd = 1, col = 'red',
xlab = 'Time', ylab = '1-Period Differences',
main = 'First Differences: Gold Price and Search Interest')
lines(y=gold_search_FD*8,x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# plot ACF for unmodified variables:
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
acf(gold_pr$GOLDPMGBD228NLBM, main = 'ACF Gold Price')
acf(data$GOLD, main = 'ACF Gold Search Interest')
# plot PACF for unmodified variables:
pacf(gold_pr$GOLDPMGBD228NLBM, main = 'PACF Gold Price')
pacf(data$GOLD, main = 'PACF Gold Search Interest')
# plot ACF for differenced variables
acf(gold_price_FD,main = 'ACF Gold Price FD')
acf(gold_search_FD, main = 'ACF Gold Search Interest FD')
# plot PACF for differenced variables
pacf(gold_price_FD,main = 'PACF Gold Price FD')
pacf(gold_search_FD, main = 'PACF Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
plot(y=range01(gold_pr$GOLDPMGBD228NLBM),x=gold_pr$DATE, lwd = 2, type = 'l',
ylab = 'Scaled Price and Search Interest',
xlab = 'Time', col = 'red')
lines(y=range01(data$GOLD),x=gold_pr$DATE, lwd = 2, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# save scaled variables
gold_price_scaled <- range01(gold_pr$GOLDPMGBD228NLBM)
gold_search_scaled <- range01(data$GOLD)
# create first difference on scaled variables:
gold_search_scaled_FD <- rep(0,t-1)
gold_price_scaled_FD <- rep(0,t-1)
for(i in 2:t-1){
gold_price_scaled_FD[i-1] <- gold_price_scaled[i]-gold_price_scaled[i-1]
}
for(i in 2:t-1){
gold_search_scaled_FD[i-1] <- gold_search_scaled[i]-gold_search_scaled[i-1]
}
# plot first differenced:
plot(y=gold_price_scaled_FD, x=gold_pr$DATE[1-209], lwd = 1, type = 'l',
ylab = 'FD Scaled Price and Search Interest',
xlab = 'Time', col = 'red')
lines(y= gold_search_scaled_FD, x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('search','price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# plot ACFs
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
acf(gold_price_scaled, main = 'ACF Scaled Gold Price')
acf(gold_search_scaled, main = 'ACF Scaled Gold Search Interest')
acf(gold_price_scaled_FD,main = 'ACF Scaled Gold Price FD')
acf(gold_search_scaled_FD, main = 'ACF Scaled Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
# plot PACFs
par(mfrow=c(2,2))     # changes the plot layout to more easily compare them
pacf(gold_price_scaled, main = 'PACF Scaled Gold Price')
pacf(gold_search_scaled, main = 'PACF Scaled Gold Search Interest')
pacf(gold_price_scaled_FD,main = 'PACF Scaled Gold Price FD')
pacf(gold_search_scaled_FD, main = 'PACF Scaled Gold Search Interest FD')
par(mfrow = c(1,1))   # revert layout changes
#####################################################
####### From here on: data saved as time series #####
#####################################################
# save variable vectors as time series format:
gold_price_scaled <- ts(gold_price_scaled, frequency = 12,
start = c(2004, 1), end = c(2021, 5))
gold_search_scaled <- ts(gold_search_scaled, frequency = 12,
start = c(2004,1), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data <- window(ts.union(gold_price_scaled, gold_search_scaled),
start = c(2004, 1), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est <- VAR(y = VAR_data, p = 5)
summary(VAR_est)
# augmented df test on only the gold price
df_test_gold_price <- urca::ur.df(gold_price_scaled, type = c('trend'),
selectlags = 'BIC')
summary(df_test_gold_price)
# the null is always random walk with drift/null
#####################################################
####### I also included DF for gold_search #####
#####################################################
# augmented df test on only the gold search
df_test_gold_search <- urca::ur.df(gold_search_scaled, type = c('trend'),
selectlags = 'BIC')
summary(df_test_gold_search)
# augmented df test on only the differenced gold price
df_test_gold_price_FD <- urca::ur.df(gold_price_scaled_FD, type = 'none',
selectlags = 'BIC')
summary(df_test_gold_price_FD)
#####################################################
####### Same here, I included DF for gold_search #####
#####################################################
# augmented df test on only the differenced gold price
df_test_gold_search_FD <- urca::ur.df(gold_search_scaled_FD, type = 'none',
selectlags = 'BIC')
summary(df_test_gold_search_FD)
# VAR model with unscaled prices
# save variable vectors as time series format:
gold_price <- ts(gold_pr$GOLDPMGBD228NLBM, frequency = 12,
start = c(2004, 1), end = c(2021, 5))
gold_search <- ts(data$GOLD, frequency = 12,
start = c(2004,1), end = c(2021,5))
# set up data for estimation using `VAR()`
VAR_data <- window(ts.union(gold_price, gold_search),
start = c(2004, 1), end = c(2021, 5))
# estimate model coefficients using `VAR()`
VAR_est <- VAR(y = VAR_data, p = 1, type = 'both')
summary(VAR_est)
#####################################################
####### Sollten wir hier beim AR(1) nicht die First differences verwenden.
# Weil wir ja einen I(1) prozess haben. Und sollten wir nicht einfach mit
# dem besteren ARMA modell arbeiten und nicht AR(1) ? #####
#####################################################
# compare the VAR to the AR(1) model for the prices
T <-length(gold_price)
gold_price_2 <- as.numeric(gold_price[-1])
gold_price_lagged <- as.numeric(gold_price[-T])
plot(y=gold_price_2,x=gold_pr$DATE[1-209], type = 'l', lwd = 1, col = 'red',
main = 'Gold Price and Lagged Gold Price',
ylab = 'Gold Price', xlab = 'Months from 01.2004')
lines(y=gold_price_lagged,x=gold_pr$DATE[1-209], lwd = 1, col = 'blue')
legend('topleft', legend = c('Lagged Price','Price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# estimate model
gold_price_AR1 <- lm(gold_price_2 ~ gold_price_lagged)
# estimate robust standard errors
coeftest(gold_price_AR1, vcov. = vcovHC, type = "HC1")
#########################################################
# Hier mal die abgeänderte Version mit AR(1) und FD #####
#########################################################
# compare the VAR to the AR(1) model for the prices first-differences
T <-length(gold_price_FD)
gold_price_FD_2 <- as.numeric(gold_price_FD[-1])
gold_price_FD_lagged <- as.numeric(gold_price_FD[-T])
plot(y=gold_price_FD_2,x=gold_pr$DATE[3:209], type = 'l', lwd = 1, col = 'red',
main = 'Gold Price FD and Lagged Gold Price FD',
ylab = 'Gold Price FD', xlab = 'Months from 01.2004')
lines(y=gold_price_FD_lagged,x=gold_pr$DATE[3:209], lwd = 1, col = 'blue')
legend('topleft', legend = c('Lagged Price','Price'),
col = c('blue','red'), bty = "n", pch = c(19,19))
# estimate model
gold_price_FD_AR1 <- lm(gold_price_FD_2 ~ gold_price_FD_lagged)
# estimate robust standard errors
coeftest(gold_price_FD_AR1, vcov. = vcovHC, type = "HC1")
# verify the 'by-hand' results with built-in function
ar.ols(gold_price, order.max = 1, intercept = T)
forecast::auto.arima(gold_price, ic = 'aic')
po.test(VAR_data, demean = TRUE, lshort = TRUE)
# Differenced AR(1) and ARCH Model for Gold Prices
gold_price_FD <- ts(gold_price_FD, frequency = 12,
start = c(2004, 2), end = c(2021, 5))
plot(gold_price_FD, ylab = 'FD Gold Prices', col = 'red', lwd = 1.5)
ar1mod_FD <- arima(gold_price_FD, order = c(1,0,0))
ar1mod_FD
plot(forecast::arima.errors(ar1mod_FD),type = 'l', lwd = 1.5, col = 'blue',
ylab = 'ARIMA residuals')
mean(forecast::arima.errors(ar1mod_FD))
resi_ar1_FD_2 <- (forecast::arima.errors(ar1mod_FD))^2
resi_arch1_FD_2_model <- arima(resi_ar1_FD_2, order = c(1,0,0))
resi_arch1_FD_2_model
# plot the squared residuals:
plot(resi_ar1_FD_2, ylab = 'Squared AR(1) Residuals of FD Gold Price',
xlab = 'Time from 02.2004', col = 'red', lwd = 1.5)
# Differenced MA(1) and ARCH Model for Gold Prices
gold_price_FD <- ts(gold_daily_FD, frequency = 365,
start = c(2001, 1, 1), end = c(2021, 6, 10))
plot(gold_price_FD, ylab = 'FD Gold Prices', col = 'red', lwd = 0.5)
model_HF_FD <- forecast::auto.arima(gold_price_FD, ic = 'aic')
model_HF_FD
plot(forecast::arima.errors(model_HF_FD),type = 'l', lwd = 0.5, col = 'blue',
ylab = 'ARIMA residuals')
resi_ma1_FD_2 <- (forecast::arima.errors(model_HF_FD))^2
resi_arch1_FD_2_model <- arima(resi_ma1_FD_2, order = c(1,0,0))
resi_arch1_FD_2_model
# plot the squared residuals:
plot(resi_ma1_FD_2, ylab = 'Squared MA(1) Residuals of FD Gold Price',
xlab = 'Time from 01.2001', col = 'red', lwd = 0.5)
#Try GARCH
gold_price_FD_clean <- na.remove(gold_price_FD) #always got an error
garch_gold_price_FD = garch(x=gold_price_FD_clean ,order=c(1,1))
summary(garch_gold_price_FD)
#Try EGARCH
#load rugarch library
library(rugarch)
spec = ugarchspec(variance.model = list(model = 'eGARCH', garchOrder = c(1, 1)))
egarch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
egarch_gold_price_FD
#Try IGARCH
spec = ugarchspec(variance.model = list(model = 'iGARCH', garchOrder = c(1, 1)))
igarch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
igarch_gold_price_FD
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)))
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
# The test gies a little diff. result. Probably something wrong.
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)))
test_garch_gold_price_FD<- ugarchfit(spec, gold_price_FD_clean, solver = 'hybrid')
test_garch_gold_price_FD
# The test gives a little diff. results. Probably something wrong.
# 2nd trial
# start with default GARCH spec.
spec = ugarchspec() #the empty function specifies the default model.
print(spec)
# 2nd trial
# start with default GARCH spec.
spec = ugarchspec() #the empty function specifies the default model.
print(spec)
def.fit = ugarchfit(spec = spec, data = gold_price_FD_clean)
print(def.fit)
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)))
test_garch_gold_price_FD<- ugarchfit(spec=spec, data=gold_price_FD_clean)
test_garch_gold_price_FD
# The test gives a little diff. results. Probably something wrong.
# Check, if the above works for standard GARCH
#fit the rugarch sGarch model with student t distribution
spec = ugarchspec(variance.model = list(model = 'sGARCH', garchOrder = c(1, 1)))
test_garch_gold_price_FD<- ugarchfit(spec=spec, data=gold_price_FD_clean)
test_garch_gold_price_FD
# The test gives a little diff. results. Probably something wrong.
#Try IGARCH
spec = ugarchspec(variance.model = list(model = 'iGARCH', garchOrder = c(1, 1)))
igarch_gold_price_FD<- ugarchfit(spec=spec, data=gold_price_FD_clean)
igarch_gold_price_FD
#Try EGARCH
#load rugarch library
library(rugarch)
spec = ugarchspec(variance.model = list(model = 'eGARCH', garchOrder = c(1, 1)))
egarch_gold_price_FD<- ugarchfit(spec=spec, data=gold_price_FD_clean, solver = 'hybrid')
egarch_gold_price_FD
#Try GARCH
gold_price_FD_clean <- na.remove(gold_price_FD) #always got an error
garch_gold_price_FD = garch(x=gold_price_FD_clean ,order=c(1,1))
summary(garch_gold_price_FD)
plot(garch_gold_price_FD)
# clear workspace
rm(list=ls())
# load needed libraries
library(readr)
library(vars)
# set working directory
setwd("/Users/samue/Downloads/Studium/Economics (Master - Vienna)/2. Semester/Macroeconometrics/Project/macroeconometrics_prices")
# import search trends
data <- read.csv("btc-vs-gold-2004.csv")
# import prices data:
gold_pr <- read.csv("gold-2004.csv")
# plot gold price
plot(gold_pr$GOLDPMGBD228NLBM,type = 'l', lwd = 2, col = 'red',
ylim = c(0,2000), main = 'Gold Price and Search Interest',
xlab = 'Time', ylab = 'Search Interest (scaled )and Price (unscaled)')
# add gold search interest scaled up
lines(25*data$GOLD, lwd = 2, col = 'blue')
# plot gold search interest
gold_xxx <- ts(data$GOLD,frequency = 12,start = c(2004, 1), end = c(2021, 5))
plot(gold_xxx, type = 'l', lwd = 1.5, col = 'blue',
ylim = c(0,110), ylab = 'Search Interest Index')
plot(gold_xxx, type = 'l', lwd = 2, col = 'blue',
ylim = c(0,110), ylab = 'Search Interest Index')
# plot gold search interest
gold_xxx <- ts(data$GOLD,frequency = 12,start = c(2004, 1), end = c(2021, 5))
plot(gold_xxx, type = 'l', lwd = 2, col = 'blue',
ylim = c(0,100), ylab = 'Search Interest Index')
plot(gold_xxx, type = 'l', lwd = 2, col = 'blue',
ylim = c(0,90), ylab = 'Search Interest Index')
